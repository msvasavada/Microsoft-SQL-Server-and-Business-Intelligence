USE [PALS2_OEMData]
GO

/****** Object:  StoredProcedure [dbo].[usp_ETL_SynchBoatData]    Script Date: 7/14/2025 2:13:22 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_ETL_SynchBoatData] (
    @MainSourceTableName NVARCHAR(255),
    @EmailSourceTableName NVARCHAR(255),
    @TransactionSourceTableName NVARCHAR(255),
    @SynchMode VARCHAR(10) = 'TRUNCATE', -- 'TRUNCATE' (safe default) or 'MERGE'
    @TestRowCount INT = NULL
)
AS
BEGIN
	SET NOCOUNT ON;
    
    -- Helper variables for logging
    DECLARE @LogMsg NVARCHAR(1000);
    DECLARE @TotalActiveRecords INT;

    SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N': --- EXECUTING dbo.usp_ETL_SynchBoatData Version 13.2 (Definitive - Final) ---';
    RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
    
    SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N': --- Synchronization Mode: ' + UPPER(@SynchMode) + N' ---';
    RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;

    IF @TestRowCount IS NOT NULL
    BEGIN
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N': --- RUNNING IN TEST MODE FOR APPROX. ' + CAST(@TestRowCount AS VARCHAR(10)) + N' RECORDS ---';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
    END

    -- Input Validation
    IF @SynchMode NOT IN ('TRUNCATE', 'MERGE') BEGIN RAISERROR('Invalid @SynchMode. Must be ''TRUNCATE'' or ''MERGE''.', 16, 1); RETURN; END
    IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = @MainSourceTableName) BEGIN RAISERROR ('Main source table ''%s'' not found.', 16, 1, @MainSourceTableName); RETURN; END
    IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = @EmailSourceTableName) BEGIN RAISERROR ('Email source table ''%s'' not found.', 16, 1, @EmailSourceTableName); RETURN; END
    IF NOT EXISTS (SELECT 1 FROM sys.tables WHERE name = @TransactionSourceTableName) BEGIN RAISERROR ('Transaction source table ''%s'' not found.', 16, 1, @TransactionSourceTableName); RETURN; END

    DECLARE @Sql NVARCHAR(MAX) = N''; 
    DECLARE @UpdateSql NVARCHAR(MAX) = N'';
    DECLARE @CRLF NCHAR(2) = NCHAR(13) + NCHAR(10);

    -- Test Mode Logic
    IF @TestRowCount IS NOT NULL
    BEGIN
        IF OBJECT_ID('tempdb..#TestKeys') IS NOT NULL DROP TABLE #TestKeys;
        CREATE TABLE #TestKeys (PA_REG NVARCHAR(15) PRIMARY KEY);
        SET @Sql = N'INSERT INTO #TestKeys (PA_REG) SELECT TOP (@pTestRowCount) PA_REG FROM (' + @CRLF +
                   N'    SELECT NULLIF(LTRIM(RTRIM(PA_REG)), N'''') AS PA_REG FROM dbo.' + QUOTENAME(@MainSourceTableName) + @CRLF +
                   N'    UNION SELECT NULLIF(LTRIM(RTRIM(RegistrationNumber)), N'''') FROM dbo.' + QUOTENAME(@EmailSourceTableName) + @CRLF +
                   N'    UNION SELECT NULLIF(LTRIM(RTRIM(REGISTRATION_NUMBER)), N'''') FROM dbo.' + QUOTENAME(@TransactionSourceTableName) + @CRLF +
                   N') AS AllKeys WHERE PA_REG IS NOT NULL;';
        EXEC sp_executesql @Sql, N'@pTestRowCount INT', @pTestRowCount = @TestRowCount;
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   #TestKeys temp table created with ' + CAST(@@ROWCOUNT AS NVARCHAR(10)) + ' sample keys.';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
    END

    -- Stage 1: Create Temp Table
    IF OBJECT_ID('tempdb..#Stage1_SourceData') IS NOT NULL DROP TABLE #Stage1_SourceData;
	CREATE TABLE #Stage1_SourceData (
		Stg1_PA_REG NVARCHAR(15) NULL, Stg1_HIN_NUMBER NVARCHAR(30) NULL, Stg1_CheckDigit NVARCHAR(50) NULL, Stg1_PREVIOUS_HIN_NUMBER NVARCHAR(100) NULL, Stg1_VESSEL_NAME NVARCHAR(50) NULL,
		Stg1_WC_MAKE NVARCHAR(100) NULL, Stg1_WC_MODEL NVARCHAR(50) NULL, Stg1_MODEL_YR SMALLINT NULL, Stg1_LENGTH_FT TINYINT NULL, Stg1_LENGTH_IN TINYINT NULL,
		Stg1_BOAT_TYPE NVARCHAR(50) NULL, Stg1_HULL_MATERIAL NVARCHAR(50) NULL, Stg1_PROPULSION_TYPE NVARCHAR(50) NULL, Stg1_POWERED NVARCHAR(50) NULL,
		Stg1_WC_ENG_DRIVE NVARCHAR(50) NULL, Stg1_WC_FUEL NVARCHAR(50) NULL, Stg1_USE_TYPE NVARCHAR(50) NULL,
		Stg1_REGIST_EXPIRATION_DATE DATETIME NULL, Stg1_REGIST_ISSUE_DATE DATETIME NULL, Stg1_REG_STATUS NVARCHAR(20) NULL, Stg1_FEE NVARCHAR(50) NULL,
		Stg1_PRIMARY_FIRST_NAME NVARCHAR(100) NULL, Stg1_PRIMARY_MIDDLE_NAME NVARCHAR(50) NULL, Stg1_PRIMARY_LAST_NAME NVARCHAR(100) NULL,
		Stg1_PRIMARY_SUFFIX_CODE NVARCHAR(50) NULL, Stg1_PRIMARY_BIRTH_DATE DATETIME NULL, Stg1_PRIMARY_PII NVARCHAR(50) NULL, Stg1_PRIMARY_OWNER_TYPE NVARCHAR(50) NULL,
		Stg1_RawAddress1 NVARCHAR(255) NULL, Stg1_RawAddress2 NVARCHAR(100) NULL, Stg1_PRIMARY_CITY_NAME NVARCHAR(100) NULL, Stg1_PRIMARY_STATE_CODE NVARCHAR(5) NULL,
		Stg1_PRIMARY_ZIP_CODE NVARCHAR(10) NULL, Stg1_PRIMARY_ZIP_EXTENSION_CODE NVARCHAR(10) NULL,
		Stg1_SECONDARY_FIRST_NAME NVARCHAR(100) NULL, Stg1_SECONDARY_MIDDLE_NAME NVARCHAR(50) NULL, Stg1_SECONDARY_LAST_NAME NVARCHAR(100) NULL, Stg1_SECONDARY_SUFFIX_CODE NVARCHAR(50) NULL, Stg1_SECONDARY_BIRTH_DATE DATETIME NULL,
		Stg1_FinalOwnerEmailAddress NVARCHAR(255) NULL, Stg1_FinalCoOwnerEmailAddress NVARCHAR(255) NULL
	);
    SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   #Stage1_SourceData temp table created.';
    RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;

    -- Stage 2: Populate the temp table
    SET @Sql = N'';
    SET @Sql = @Sql + N';WITH ActiveMain AS (' + @CRLF;
    SET @Sql = @Sql + N'    SELECT *, NULLIF(LTRIM(RTRIM(PA_REG)), N'''') AS Cleaned_PA_REG, NULLIF(LTRIM(RTRIM(HIN_NUMBER)), N'''') AS Cleaned_HIN FROM dbo.' + QUOTENAME(@MainSourceTableName) + N' m' + @CRLF;
    SET @Sql = @Sql + N'    WHERE (LTRIM(RTRIM(ISNULL(m.REG_STATUS, ''''))) = ''ACTIVE'' OR (LTRIM(RTRIM(ISNULL(m.REG_STATUS, ''''))) = '''' AND TRY_CONVERT(datetime, m.REGIST_EXPIRATION_DATE, 112) > GETDATE()))' + @CRLF;
    IF @TestRowCount IS NOT NULL SET @Sql = @Sql + N'    AND NULLIF(LTRIM(RTRIM(m.PA_REG)), N'''') IN (SELECT PA_REG FROM #TestKeys)' + @CRLF;
    SET @Sql = @Sql + N'), ActiveEmail AS (' + @CRLF;
    SET @Sql = @Sql + N'    SELECT *, NULLIF(LTRIM(RTRIM(RegistrationNumber)), N'''') AS Cleaned_PA_REG, NULLIF(LTRIM(RTRIM(Hin)), N'''') AS Cleaned_HIN FROM dbo.' + QUOTENAME(@EmailSourceTableName) + N' e' + @CRLF;
    SET @Sql = @Sql + N'    WHERE TRY_CONVERT(datetime, e.RegistrationExpirationDate, 101) > GETDATE()' + @CRLF;
    IF @TestRowCount IS NOT NULL SET @Sql = @Sql + N'    AND NULLIF(LTRIM(RTRIM(e.RegistrationNumber)), N'''') IN (SELECT PA_REG FROM #TestKeys)' + @CRLF;
    SET @Sql = @Sql + N'), ActiveTransaction AS (' + @CRLF;
    SET @Sql = @Sql + N'    SELECT *, NULLIF(LTRIM(RTRIM(REGISTRATION_NUMBER)), N'''') as Cleaned_PA_REG, NULLIF(LTRIM(RTRIM(HULL_IDENTIFICATION_NUMBER)), N'''') as Cleaned_HIN, NULLIF(LTRIM(RTRIM(CASE WHEN CHARINDEX('' '', REGISTRANT_NAME) > 0 THEN LEFT(REGISTRANT_NAME, CHARINDEX('' '', REGISTRANT_NAME) - 1) ELSE REGISTRANT_NAME END)), N'''') AS t_ParsedFirstName, NULLIF(LTRIM(RTRIM(CASE WHEN CHARINDEX('' '', REGISTRANT_NAME) > 0 THEN SUBSTRING(REGISTRANT_NAME, CHARINDEX('' '', REGISTRANT_NAME) + 1, 8000) ELSE NULL END)), N'''') AS t_ParsedLastName FROM dbo.' + QUOTENAME(@TransactionSourceTableName) + N' t' + @CRLF;
    SET @Sql = @Sql + N'    WHERE TRY_CONVERT(datetime, t.REG_OR_RENEW_EXPRY_DATE, 6) > GETDATE()' + @CRLF;
    IF @TestRowCount IS NOT NULL SET @Sql = @Sql + N'    AND NULLIF(LTRIM(RTRIM(t.REGISTRATION_NUMBER)), N'''') IN (SELECT PA_REG FROM #TestKeys)' + @CRLF;
    SET @Sql = @Sql + N')' + @CRLF;
    SET @Sql = @Sql + N'INSERT INTO #Stage1_SourceData SELECT COALESCE(m.Cleaned_PA_REG, e.Cleaned_PA_REG, t.Cleaned_PA_REG), COALESCE(m.Cleaned_HIN, e.Cleaned_HIN, t.Cleaned_HIN), e.CheckDigit, m.PREVIOUS_HIN_NUMBER, m.VESSEL_NAME, COALESCE(m.WC_MAKE, e.Make, t.MAKE), m.WC_MODEL, COALESCE(TRY_CAST(m.MODEL_YR AS SMALLINT), TRY_CAST(e.ModelYear AS SMALLINT), TRY_CAST(t.YEAR AS SMALLINT)), COALESCE(TRY_CAST(m.LENGTH_FT AS TINYINT), TRY_CAST(e.LengthFeet AS TINYINT), TRY_CAST(t.LENGTH AS TINYINT)), TRY_CAST(m.LENGTH_IN AS TINYINT), COALESCE(m.WC_BODY_TYPE, t.BOAT_TYPE), COALESCE(m.WC_HULL_MATERIAL, t.HULL_MATERIAL), COALESCE(m.WC_PROPULSION, t.PROPULSION_TYPE), t.POWERED, m.WC_ENG_DRIVE, m.WC_FUEL, COALESCE(m.WC_USE, t.USE_TYPE), COALESCE(TRY_CONVERT(datetime, m.REGIST_EXPIRATION_DATE, 112), TRY_CONVERT(datetime, e.RegistrationExpirationDate, 101), TRY_CONVERT(datetime, t.REG_OR_RENEW_EXPRY_DATE, 6)), COALESCE(TRY_CONVERT(datetime, m.REGIST_ISSUE_DATE, 112), TRY_CONVERT(datetime, t.LAST_REG_OR_RENEW_DATE, 6)), m.REG_STATUS, COALESCE(e.Fee, t.RENEWAL_FEE), COALESCE(m.PRIMARY_FIRST_NAME, e.OwnerFirstName, t.t_ParsedFirstName), COALESCE(m.PRIMARY_MIDDLE_NAME, e.OwnerMiddleName), COALESCE(m.PRIMARY_LAST_NAME, e.OwnerLastName, t.t_ParsedLastName), COALESCE(m.PRIMARY_SUFFIX_CODE, e.OwnerSuffixCode), COALESCE(TRY_CONVERT(datetime, m.PRIMARY_BIRTH_DATE, 112), TRY_CONVERT(datetime, e.OwnerDateOfBirth, 101), TRY_CONVERT(datetime, t.BIRTH_DATE, 6)), COALESCE(m.PRIMARY_PII, e.OwnerDriverLicense), m.PRIMARY_OWNER_TYPE, COALESCE(m.PRIMARY_ADDRESS_LINE1, e.AddressLine1, t.ADDRESS1), COALESCE(e.AddressLine2, t.ADDRESS2), COALESCE(m.PRIMARY_CITY_NAME, e.City, t.CITY), COALESCE(m.PRIMARY_STATE_CODE, e.StateCode, t.STATE), COALESCE(LEFT(m.PRIMARY_ZIP_CODE, 5), LEFT(e.ZipCodeExtn, 5), LEFT(t.ZIP, 5)), m.PRIMARY_ZIP_EXTENSION_CODE, COALESCE(m.SECONDARY_FIRST_NAME, e.CoOwnerFirstName), COALESCE(m.SECONDARY_MIDDLE_NAME, e.CoOwnerMiddleName), COALESCE(m.SECONDARY_LAST_NAME, e.CoOwnerLastName), COALESCE(m.SECONDARY_SUFFIX_CODE, e.CoOwnerSuffixCode), TRY_CONVERT(datetime, e.CoOwnerDateOfBirth, 101), COALESCE(e.OwnerEmailAddress, t.EMAIL_NAME), e.CoOwnerEmailAddress FROM ActiveMain m FULL OUTER JOIN ActiveEmail e ON m.Cleaned_PA_REG = e.Cleaned_PA_REG OR m.Cleaned_HIN = e.Cleaned_HIN FULL OUTER JOIN ActiveTransaction t ON COALESCE(m.Cleaned_PA_REG, e.Cleaned_PA_REG) = t.Cleaned_PA_REG OR COALESCE(m.Cleaned_HIN, e.Cleaned_HIN) = t.Cleaned_HIN;';
    
    EXEC sp_executesql @Sql;
    
    SET @TotalActiveRecords = @@ROWCOUNT;
    SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Temp table populated with ' + CAST(@TotalActiveRecords AS NVARCHAR(10)) + N' unique active records to process.';
    RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;

    CREATE INDEX IX_Temp_Stage1_RegNo ON #Stage1_SourceData (Stg1_PA_REG) WHERE Stg1_PA_REG IS NOT NULL;
    SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Index created on temp table.';
    RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;

    -- Stage 3: Prepare the final SQL for the MAIN data load
    SET @Sql = N'';
    SET @Sql = @Sql + N';WITH FinalData AS (' + @CRLF;
    SET @Sql = @Sql + N'   SELECT *, ' + @CRLF;
    SET @Sql = @Sql + N'      (CASE WHEN s.Stg1_PRIMARY_BIRTH_DATE > GETDATE() OR s.Stg1_REGIST_ISSUE_DATE > GETDATE() THEN 1 ELSE 0 END) AS IsLikelyShifted,' + @CRLF;
    SET @Sql = @Sql + N'      STUFF(COALESCE(N''; '' + CASE WHEN s.Stg1_REGIST_ISSUE_DATE > GETDATE() THEN ''RegIssueDateInFuture'' END, N'''') + COALESCE(N''; '' + CASE WHEN s.Stg1_REGIST_EXPIRATION_DATE < s.Stg1_REGIST_ISSUE_DATE THEN ''ExpireBeforeIssue'' END, N'''') + COALESCE(N''; '' + CASE WHEN (s.Stg1_REG_STATUS = ''ACTIVE'' AND s.Stg1_REGIST_EXPIRATION_DATE < GETDATE()) THEN ''ActiveButExpired'' END, N'''') + COALESCE(N''; '' + CASE WHEN s.Stg1_PRIMARY_BIRTH_DATE > GETDATE() THEN ''BirthDateInFuture'' END, N'''') + COALESCE(N''; '' + CASE WHEN DATEDIFF(year, s.Stg1_PRIMARY_BIRTH_DATE, GETDATE()) < 16 THEN ''Owner<16'' END, N'''') + COALESCE(N''; '' + CASE WHEN LEN(ISNULL(s.Stg1_HIN_NUMBER, N'''')) <> 12 THEN ''InvalidHINLength'' END, N'''') + COALESCE(N''; '' + CASE WHEN s.Stg1_FinalOwnerEmailAddress IS NOT NULL AND s.Stg1_FinalOwnerEmailAddress NOT LIKE ''%_@__%.__%'' THEN ''InvalidPrimaryEmail'' END, N'''') + COALESCE(N''; '' + CASE WHEN s.Stg1_PRIMARY_BIRTH_DATE IS NULL THEN ''NullBirthDate'' END, N'''') + COALESCE(N''; '' + CASE WHEN s.Stg1_RawAddress1 IS NULL THEN ''NullAddress'' END, N''''), 1, 3, N'''') AS CleaningNotes' + @CRLF;
    SET @Sql = @Sql + N'   FROM #Stage1_SourceData s WHERE s.Stg1_PA_REG IS NOT NULL OR s.Stg1_HIN_NUMBER IS NOT NULL' + @CRLF;
    SET @Sql = @Sql + N'), FinalDataWithScore AS ( SELECT *, (100 - (CASE WHEN CleaningNotes LIKE ''%InvalidPrimaryEmail%'' THEN 10 ELSE 0 END) - (CASE WHEN CleaningNotes LIKE ''%InvalidHINLength%'' THEN 15 ELSE 0 END) - (CASE WHEN CleaningNotes LIKE ''%NullBirthDate%'' THEN 5 ELSE 0 END) - (CASE WHEN CleaningNotes LIKE ''%Owner<16%'' THEN 5 ELSE 0 END) - (CASE WHEN CleaningNotes LIKE ''%ActiveButExpired%'' THEN 20 ELSE 0 END) - (CASE WHEN CleaningNotes LIKE ''%NullAddress%'' THEN 10 ELSE 0 END)) AS DataQualityScore FROM FinalData)' + @CRLF;
    
    -- Stage 4: Execution logic based on mode
    IF @SynchMode = 'TRUNCATE'
    BEGIN
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Executing in TRUNCATE/INSERT mode.';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
        TRUNCATE TABLE dbo.Boat_Cleaned_Staging;
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':     Destination table truncated.';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
        
        SET @Sql = @Sql + N'INSERT INTO dbo.Boat_Cleaned_Staging (IsLikelyShifted, DataQualityScore, CleaningNotes, PrimaryOwnerEmail, SecondaryOwnerEmail, PA_REG, CheckDigit, HIN_NUMBER, PREVIOUS_HIN_NUMBER, VESSEL_NAME, WC_MAKE, WC_MODEL, MODEL_YR, LENGTH_FT, LENGTH_IN, BOAT_TYPE, HULL_MATERIAL, PROPULSION_TYPE, POWERED, WC_ENG_DRIVE, WC_FUEL, USE_TYPE, REGIST_EXPIRATION_DATE, REGIST_ISSUE_DATE, REG_STATUS, FEE, PRIMARY_FIRST_NAME, PRIMARY_MIDDLE_NAME, PRIMARY_LAST_NAME, PRIMARY_SUFFIX_CODE, PRIMARY_BIRTH_DATE, PRIMARY_PII, PRIMARY_OWNER_TYPE, PRIMARY_ADDRESS_LINE1, PRIMARY_ADDRESS_LINE2, PRIMARY_CITY_NAME, PRIMARY_STATE_CODE, PRIMARY_ZIP_CODE, PRIMARY_ZIP_EXTENSION_CODE, SECONDARY_FIRST_NAME, SECONDARY_MIDDLE_NAME, SECONDARY_LAST_NAME, SECONDARY_SUFFIX_CODE, SECONDARY_BIRTH_DATE) ' + @CRLF;
        SET @Sql = @Sql + N'SELECT IsLikelyShifted, DataQualityScore, CleaningNotes, Stg1_FinalOwnerEmailAddress, Stg1_FinalCoOwnerEmailAddress, Stg1_PA_REG, Stg1_CheckDigit, Stg1_HIN_NUMBER, Stg1_PREVIOUS_HIN_NUMBER, Stg1_VESSEL_NAME, Stg1_WC_MAKE, Stg1_WC_MODEL, Stg1_MODEL_YR, Stg1_LENGTH_FT, Stg1_LENGTH_IN, Stg1_BOAT_TYPE, Stg1_HULL_MATERIAL, Stg1_PROPULSION_TYPE, Stg1_POWERED, Stg1_WC_ENG_DRIVE, Stg1_WC_FUEL, Stg1_USE_TYPE, CAST(Stg1_REGIST_EXPIRATION_DATE AS DATE), CAST(Stg1_REGIST_ISSUE_DATE AS DATE), Stg1_REG_STATUS, TRY_CAST(Stg1_FEE AS DECIMAL(10,2)), Stg1_PRIMARY_FIRST_NAME, Stg1_PRIMARY_MIDDLE_NAME, Stg1_PRIMARY_LAST_NAME, Stg1_PRIMARY_SUFFIX_CODE, CAST(Stg1_PRIMARY_BIRTH_DATE AS DATE), Stg1_PRIMARY_PII, Stg1_PRIMARY_OWNER_TYPE, Stg1_RawAddress1, Stg1_RawAddress2, Stg1_PRIMARY_CITY_NAME, Stg1_PRIMARY_STATE_CODE, Stg1_PRIMARY_ZIP_CODE, Stg1_PRIMARY_ZIP_EXTENSION_CODE, Stg1_SECONDARY_FIRST_NAME, Stg1_SECONDARY_MIDDLE_NAME, Stg1_SECONDARY_LAST_NAME, Stg1_SECONDARY_SUFFIX_CODE, CAST(Stg1_SECONDARY_BIRTH_DATE AS DATE) FROM FinalDataWithScore;';
    END
    ELSE -- MERGE Mode
    BEGIN
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Executing in MERGE mode.';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
        SET @Sql = @Sql + N'MERGE dbo.Boat_Cleaned_Staging AS T USING FinalDataWithScore AS S ON (T.PA_REG = S.Stg1_PA_REG AND S.Stg1_PA_REG IS NOT NULL)' + @CRLF;
        SET @Sql = @Sql + N'WHEN MATCHED THEN UPDATE SET T.IsLikelyShifted=S.IsLikelyShifted, T.DataQualityScore=S.DataQualityScore, T.CleaningNotes=S.CleaningNotes, T.PrimaryOwnerEmail=S.Stg1_FinalOwnerEmailAddress, T.SecondaryOwnerEmail=S.Stg1_FinalCoOwnerEmailAddress, T.PA_REG=S.Stg1_PA_REG, T.CheckDigit=S.Stg1_CheckDigit, T.HIN_NUMBER=S.Stg1_HIN_NUMBER, T.PREVIOUS_HIN_NUMBER=S.Stg1_PREVIOUS_HIN_NUMBER, T.VESSEL_NAME=S.Stg1_VESSEL_NAME, T.WC_MAKE=S.Stg1_WC_MAKE, T.WC_MODEL=S.Stg1_WC_MODEL, T.MODEL_YR=S.Stg1_MODEL_YR, T.LENGTH_FT=S.Stg1_LENGTH_FT, T.LENGTH_IN=S.Stg1_LENGTH_IN, T.BOAT_TYPE=S.Stg1_BOAT_TYPE, T.HULL_MATERIAL=S.Stg1_HULL_MATERIAL, T.PROPULSION_TYPE=S.Stg1_PROPULSION_TYPE, T.POWERED=S.Stg1_POWERED, T.WC_ENG_DRIVE=S.Stg1_WC_ENG_DRIVE, T.WC_FUEL=S.Stg1_WC_FUEL, T.USE_TYPE=S.Stg1_USE_TYPE, T.REGIST_EXPIRATION_DATE=CAST(S.Stg1_REGIST_EXPIRATION_DATE AS DATE), T.REGIST_ISSUE_DATE=CAST(S.Stg1_REGIST_ISSUE_DATE AS DATE), T.REG_STATUS=S.Stg1_REG_STATUS, T.FEE=TRY_CAST(S.Stg1_FEE AS DECIMAL(10,2)), T.PRIMARY_FIRST_NAME=S.Stg1_PRIMARY_FIRST_NAME, T.PRIMARY_MIDDLE_NAME=S.Stg1_PRIMARY_MIDDLE_NAME, T.PRIMARY_LAST_NAME=S.Stg1_PRIMARY_LAST_NAME, T.PRIMARY_SUFFIX_CODE=S.Stg1_PRIMARY_SUFFIX_CODE, T.PRIMARY_BIRTH_DATE=CAST(S.Stg1_PRIMARY_BIRTH_DATE AS DATE), T.PRIMARY_PII=S.Stg1_PRIMARY_PII, T.PRIMARY_OWNER_TYPE=S.Stg1_PRIMARY_OWNER_TYPE, T.PRIMARY_ADDRESS_LINE1=S.Stg1_RawAddress1, T.PRIMARY_ADDRESS_LINE2=S.Stg1_RawAddress2, T.PRIMARY_CITY_NAME=S.Stg1_PRIMARY_CITY_NAME, T.PRIMARY_STATE_CODE=S.Stg1_PRIMARY_STATE_CODE, T.PRIMARY_ZIP_CODE=S.Stg1_PRIMARY_ZIP_CODE, T.PRIMARY_ZIP_EXTENSION_CODE=S.Stg1_PRIMARY_ZIP_EXTENSION_CODE, T.SECONDARY_FIRST_NAME=S.Stg1_SECONDARY_FIRST_NAME, T.SECONDARY_MIDDLE_NAME=S.Stg1_SECONDARY_MIDDLE_NAME, T.SECONDARY_LAST_NAME=S.Stg1_SECONDARY_LAST_NAME, T.SECONDARY_SUFFIX_CODE=S.Stg1_SECONDARY_SUFFIX_CODE, T.SECONDARY_BIRTH_DATE=CAST(S.Stg1_SECONDARY_BIRTH_DATE AS DATE)' + @CRLF;
        SET @Sql = @Sql + N'WHEN NOT MATCHED BY TARGET THEN INSERT (IsLikelyShifted, DataQualityScore, CleaningNotes, PrimaryOwnerEmail, SecondaryOwnerEmail, PA_REG, CheckDigit, HIN_NUMBER, PREVIOUS_HIN_NUMBER, VESSEL_NAME, WC_MAKE, WC_MODEL, MODEL_YR, LENGTH_FT, LENGTH_IN, BOAT_TYPE, HULL_MATERIAL, PROPULSION_TYPE, POWERED, WC_ENG_DRIVE, WC_FUEL, USE_TYPE, REGIST_EXPIRATION_DATE, REGIST_ISSUE_DATE, REG_STATUS, FEE, PRIMARY_FIRST_NAME, PRIMARY_MIDDLE_NAME, PRIMARY_LAST_NAME, PRIMARY_SUFFIX_CODE, PRIMARY_BIRTH_DATE, PRIMARY_PII, PRIMARY_OWNER_TYPE, PRIMARY_ADDRESS_LINE1, PRIMARY_ADDRESS_LINE2, PRIMARY_CITY_NAME, PRIMARY_STATE_CODE, PRIMARY_ZIP_CODE, PRIMARY_ZIP_EXTENSION_CODE, SECONDARY_FIRST_NAME, SECONDARY_MIDDLE_NAME, SECONDARY_LAST_NAME, SECONDARY_SUFFIX_CODE, SECONDARY_BIRTH_DATE) VALUES (S.IsLikelyShifted, S.DataQualityScore, S.CleaningNotes, S.Stg1_FinalOwnerEmailAddress, S.Stg1_FinalCoOwnerEmailAddress, S.Stg1_PA_REG, S.Stg1_CheckDigit, S.Stg1_HIN_NUMBER, S.Stg1_PREVIOUS_HIN_NUMBER, S.Stg1_VESSEL_NAME, S.Stg1_WC_MAKE, S.Stg1_WC_MODEL, S.Stg1_MODEL_YR, S.Stg1_LENGTH_FT, S.Stg1_LENGTH_IN, S.Stg1_BOAT_TYPE, S.Stg1_HULL_MATERIAL, S.Stg1_PROPULSION_TYPE, S.Stg1_POWERED, S.Stg1_WC_ENG_DRIVE, S.Stg1_WC_FUEL, S.Stg1_USE_TYPE, CAST(S.Stg1_REGIST_EXPIRATION_DATE AS DATE), CAST(S.Stg1_REGIST_ISSUE_DATE AS DATE), S.Stg1_REG_STATUS, TRY_CAST(S.Stg1_FEE AS DECIMAL(10,2)), S.Stg1_PRIMARY_FIRST_NAME, S.Stg1_PRIMARY_MIDDLE_NAME, S.Stg1_PRIMARY_LAST_NAME, S.Stg1_PRIMARY_SUFFIX_CODE, CAST(S.Stg1_PRIMARY_BIRTH_DATE AS DATE), S.Stg1_PRIMARY_PII, S.Stg1_PRIMARY_OWNER_TYPE, S.Stg1_RawAddress1, S.Stg1_RawAddress2, S.Stg1_PRIMARY_CITY_NAME, S.Stg1_PRIMARY_STATE_CODE, S.Stg1_PRIMARY_ZIP_CODE, S.Stg1_PRIMARY_ZIP_EXTENSION_CODE, S.Stg1_SECONDARY_FIRST_NAME, S.Stg1_SECONDARY_MIDDLE_NAME, S.Stg1_SECONDARY_LAST_NAME, S.Stg1_SECONDARY_SUFFIX_CODE, CAST(S.Stg1_SECONDARY_BIRTH_DATE AS DATE))' + @CRLF;
        IF @TestRowCount IS NULL SET @Sql = @Sql + N'WHEN NOT MATCHED BY SOURCE THEN DELETE' + @CRLF;
        SET @Sql = @Sql + N';';
    END

    -- Execution of main data load
    BEGIN TRY
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Executing main data load (without address normalization)...';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
        EXEC sp_executesql @Sql;
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Main data load completed successfully. ' + CAST(@@ROWCOUNT AS NVARCHAR(20)) + ' rows affected.';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
    END TRY
    BEGIN CATCH
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N': *** FATAL ERROR during Main Data Load ***';
        RAISERROR(@LogMsg, 16, 1) WITH NOWAIT;
        PRINT 'Error Number:  ' + CAST(ERROR_NUMBER() AS VARCHAR(20)); PRINT 'Error Message: ' + ERROR_MESSAGE(); PRINT 'Error Line:    ' + CAST(ERROR_LINE() AS VARCHAR(20));
        PRINT '--- Generated SQL (first 4000 chars) ---'; PRINT LEFT(@Sql, 4000);
        IF LEN(@Sql) > 4000 PRINT '--- Generated SQL (chars 4001-8000) ---' + @CRLF + SUBSTRING(@Sql, 4001, 4000);
        THROW;
    END CATCH

    -- Stage 5 - Post-Processing for Address Normalization
    BEGIN TRY
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Beginning address normalization post-processing... (This may be slow)';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
        
        -- BUGFIX: Corrected the final typo in the REPLACE chain (N' W. ')
        UPDATE dbo.Boat_Cleaned_Staging SET PRIMARY_ADDRESS_NORMALIZED = 
            NULLIF(LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE((N' ' + UPPER(ISNULL(PRIMARY_ADDRESS_LINE1, N'')) + N' '), N' STREET ', N'ST'), N' AVENUE ', N'AVE'), N' ROAD ', N'RD'), N' DRIVE ', N'DR'), N' LANE ', N'LN'), N' COURT ', N'CT'), N' PLACE ', N'PL'), N' BOULEVARD ', N'BLVD'), N' CIRCLE ', N'CIR'), N' PARKWAY ', N'PKWY'), N' PKY ', N'PKWY'), N' TRAIL ', N'TRL'), N' TERRACE ', N'TER'), N' NORTH EAST ', N'NE'), N' NORTHEAST ', N'NE'), N' NORTH WEST ', N'NW'), N' NORTHWEST ', N'NW'), N' SOUTH EAST ', N'SE'), N' SOUTHEAST ', N'SE'), N' SOUTH WEST ', N'SW'), N' SOUTHWEST ', N'SW'), N' NORTH ', N'N'), N' SOUTH ', N'S'), N' EAST ', N'E'), N' WEST ', N'W'), N' N.E. ', N'NE'), N' N.E ', N'NE'), N' N E ', N'NE'), N' N E. ', N'NE'), N' N.W. ', N'NW'), N' N.W ', N'NW'), N' N W ', N'NW'), N' N W. ', N'NW'), N' S.E. ', N'SE'), N' S.E ', N'SE'), N' S E ', N'SE'), N' S E. ', N'SE'), N' S.W. ', N'SW'), N' S.W ', N'SW'), N' S W ', N'SW'), N' S W. ', N'SW'), N' N. ', N'N'), N' S. ', N'S'), N' E. ', N'E'), N' W. ', N'W'))), N'''');

        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N':   Address normalization complete. ' + CAST(@@ROWCOUNT AS NVARCHAR(20)) + ' rows updated.';
        RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;
    END TRY
    BEGIN CATCH
        SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N': *** FATAL ERROR during Address Normalization ***';
        RAISERROR(@LogMsg, 16, 1) WITH NOWAIT;
        PRINT 'Error Number:  ' + CAST(ERROR_NUMBER() AS VARCHAR(20)); PRINT 'Error Message: ' + ERROR_MESSAGE(); PRINT 'Error Line:    ' + CAST(ERROR_LINE() AS VARCHAR(20));
        THROW;
    END CATCH

    -- Cleanup
    IF OBJECT_ID('tempdb..#Stage1_SourceData') IS NOT NULL DROP TABLE #Stage1_SourceData;
    IF @TestRowCount IS NOT NULL AND OBJECT_ID('tempdb..#TestKeys') IS NOT NULL DROP TABLE #TestKeys;
    
    SET @LogMsg = CONVERT(NVARCHAR(23), GETDATE(), 121) + N': --- Procedure finished. ---';
    RAISERROR(@LogMsg, 10, 1) WITH NOWAIT;

END
GO


