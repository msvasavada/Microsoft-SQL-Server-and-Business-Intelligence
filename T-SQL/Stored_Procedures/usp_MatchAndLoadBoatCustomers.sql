USE [PALS2_OEMData]
GO

/****** Object:  StoredProcedure [dbo].[usp_MatchAndLoadBoatCustomers]    Script Date: 7/14/2025 2:15:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/***************************************************************************************************
    Stored Procedure: usp_MatchAndLoadBoatCustomers
    Description:      The definitive, production-ready procedure. This version implements a
                      comprehensive, multi-layered matching hierarchy with intelligent, in-place
                      ambiguity resolution and email-independent matching with back-population, based on
                      advanced user specifications. It is resilient to duplicate source data and
                      includes robust transaction handling and real-time progress monitoring.
***************************************************************************************************/
CREATE   PROCEDURE [dbo].[usp_MatchAndLoadBoatCustomers]
    @TestRowCount INT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
    SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

    -- Variable Declaration
    DECLARE @TotalRecords INT, @FoundMatches INT, @AffectedRows INT, @Msg NVARCHAR(500), @TimeNow VARCHAR(20), @Sql NVARCHAR(MAX);

    -- Procedure Start Logging
    RAISERROR(N'--- Procedure Started: usp_MatchAndLoadBoatCustomers ---', 10, 1) WITH NOWAIT;
    SET @TimeNow = CONVERT(VARCHAR, GETDATE(), 120); RAISERROR(N'Start Time: %s', 10, 1, @TimeNow) WITH NOWAIT; RAISERROR(N'', 10, 1) WITH NOWAIT;

    -- =================================================================
    -- Step 1: Prepare Staging Table with De-duplication
    -- =================================================================
    RAISERROR(N'Step 1: Preparing staging table...', 10, 1) WITH NOWAIT;
    IF OBJECT_ID('tempdb..#Staging') IS NOT NULL DROP TABLE #Staging;
    CREATE TABLE #Staging ( BusinessKey NVARCHAR(255), Primary_CID NVARCHAR(18), Primary_Match_Tier VARCHAR(100), Probable_Primary_CIDs NVARCHAR(MAX), Secondary_CID NVARCHAR(18), Secondary_Match_Tier VARCHAR(100), Probable_Secondary_CIDs NVARCHAR(MAX), PrimaryOwnerEmail VARCHAR(255), PRIMARY_FIRST_NAME VARCHAR(100), PRIMARY_LAST_NAME VARCHAR(100), PRIMARY_BIRTH_DATE DATE, PRIMARY_POSTAL_CODE VARCHAR(5), SecondaryOwnerEmail VARCHAR(255), SECONDARY_FIRST_NAME VARCHAR(100), SECONDARY_LAST_NAME VARCHAR(100), SECONDARY_BIRTH_DATE DATE, SECONDARY_POSTAL_CODE VARCHAR(5), PA_REG VARCHAR(50), HIN_NUMBER VARCHAR(50), CheckDigit VARCHAR(50), PREVIOUS_HIN_NUMBER VARCHAR(100), WC_MAKE VARCHAR(100), WC_MODEL VARCHAR(50), MODEL_YR SMALLINT, LENGTH_FT TINYINT, LENGTH_IN TINYINT, BOAT_TYPE VARCHAR(50), POWERED VARCHAR(50), USE_TYPE VARCHAR(50), REGIST_EXPIRATION_DATE DATETIME2, REGIST_ISSUE_DATE DATETIME2, REG_STATUS VARCHAR(50), FEE DECIMAL(10, 2), PRIMARY_MIDDLE_NAME VARCHAR(50), PRIMARY_SUFFIX_CODE VARCHAR(50), PRIMARY_OWNER_TYPE VARCHAR(50), PRIMARY_ADDRESS_LINE1 VARCHAR(255), PRIMARY_ADDRESS_LINE2 VARCHAR(100), PRIMARY_ADDRESS_NORMALIZED VARCHAR(255), PRIMARY_CITY_NAME VARCHAR(100), PRIMARY_STATE_CODE VARCHAR(5), PRIMARY_ZIP_EXTENSION_CODE VARCHAR(10), PRIMARY_COUNTY_NAME VARCHAR(50), SECONDARY_MIDDLE_NAME VARCHAR(50), SECONDARY_SUFFIX_CODE VARCHAR(50), SECONDARY_OWNER_TYPE VARCHAR(50), SECONDARY_ADDRESS_LINE1 VARCHAR(100), SECONDARY_CITY_NAME VARCHAR(50), SECONDARY_STATE_CODE VARCHAR(5), SECONDARY_ZIP_EXTENSION_CODE VARCHAR(10), SECONDARY_COUNTY_NAME VARCHAR(50) );
    SET @Sql = N'WITH SourceData AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY COALESCE(PA_REG, HIN_NUMBER) ORDER BY RowId DESC) as rn FROM dbo.Boat_Cleaned_Staging) INSERT INTO #Staging SELECT ' + CASE WHEN @TestRowCount IS NOT NULL THEN N'TOP (@LocalTestRowCount) ' ELSE N'' END + N'COALESCE(s.PA_REG, s.HIN_NUMBER),CAST(NULL AS NVARCHAR(18)), CAST(NULL AS VARCHAR(100)), CAST(NULL AS NVARCHAR(MAX)),CAST(NULL AS NVARCHAR(18)), CAST(NULL AS VARCHAR(100)), CAST(NULL AS NVARCHAR(MAX)),UPPER(LTRIM(RTRIM(s.PrimaryOwnerEmail))), UPPER(LTRIM(RTRIM(s.PRIMARY_FIRST_NAME))), UPPER(LTRIM(RTRIM(s.PRIMARY_LAST_NAME))), CAST(s.PRIMARY_BIRTH_DATE AS DATE), LEFT(LTRIM(RTRIM(s.PRIMARY_ZIP_CODE)), 5),UPPER(LTRIM(RTRIM(s.SecondaryOwnerEmail))), UPPER(LTRIM(RTRIM(s.SECONDARY_FIRST_NAME))), UPPER(LTRIM(RTRIM(s.SECONDARY_LAST_NAME))), CAST(s.SECONDARY_BIRTH_DATE AS DATE), LEFT(LTRIM(RTRIM(s.SECONDARY_ZIP_CODE)), 5),s.PA_REG, s.HIN_NUMBER, s.CheckDigit, s.PREVIOUS_HIN_NUMBER, s.WC_MAKE, s.WC_MODEL, s.MODEL_YR, s.LENGTH_FT, s.LENGTH_IN, s.BOAT_TYPE, s.POWERED, s.USE_TYPE, CAST(s.REGIST_EXPIRATION_DATE AS DATETIME2), CAST(s.REGIST_ISSUE_DATE AS DATETIME2), CASE WHEN s.REGIST_EXPIRATION_DATE < GETDATE() THEN ''Expired'' ELSE ''Active'' END, s.FEE, s.PRIMARY_MIDDLE_NAME, s.PRIMARY_SUFFIX_CODE, s.PRIMARY_OWNER_TYPE, s.PRIMARY_ADDRESS_LINE1, s.PRIMARY_ADDRESS_LINE2, s.PRIMARY_ADDRESS_NORMALIZED, s.PRIMARY_CITY_NAME, s.PRIMARY_STATE_CODE, s.PRIMARY_ZIP_EXTENSION_CODE, s.PRIMARY_COUNTY_NAME, s.SECONDARY_MIDDLE_NAME, s.SECONDARY_SUFFIX_CODE, s.SECONDARY_OWNER_TYPE, s.SECONDARY_ADDRESS_LINE1, s.SECONDARY_CITY_NAME, s.SECONDARY_STATE_CODE, s.SECONDARY_ZIP_EXTENSION_CODE, s.SECONDARY_COUNTY_NAME FROM SourceData s WHERE s.rn = 1;';
    EXEC sp_executesql @Sql, N'@LocalTestRowCount INT', @LocalTestRowCount = @TestRowCount;
    SET @TotalRecords = @@ROWCOUNT; SET @Msg = N'    > Staging table created with %i de-duplicated records.'; RAISERROR(@Msg, 10, 1, @TotalRecords) WITH NOWAIT;
    CREATE UNIQUE CLUSTERED INDEX CIX_Staging ON #Staging(BusinessKey);

    BEGIN TRY
        BEGIN TRANSACTION;

        CREATE TABLE #MatchResults(BusinessKey NVARCHAR(255) NOT NULL, CustomerId NVARCHAR(18) NULL, MatchCount INT NOT NULL, All_CIDs NVARCHAR(MAX) NULL); CREATE CLUSTERED INDEX CIX_MatchResults ON #MatchResults(BusinessKey);

        -- =================================================================
        -- Step 2: Primary Owner Matching
        -- =================================================================
        RAISERROR(N'', 10, 1) WITH NOWAIT; RAISERROR(N'--- Step 2: Starting Primary Owner Matching ---', 10, 1) WITH NOWAIT;
        
        -- Tier 1A -> 1A-1 -> 1A-2
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner WHERE c_inner.EmailAddress = s.PrimaryOwnerEmail AND c_inner.LastName = s.PRIMARY_LAST_NAME AND CAST(c_inner.DateOfBirth AS DATE) = s.PRIMARY_BIRTH_DATE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.PrimaryOwnerEmail = c.EmailAddress AND s.PRIMARY_LAST_NAME = c.LastName AND s.PRIMARY_BIRTH_DATE = CAST(c.DateOfBirth AS DATE) WHERE s.Primary_CID IS NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 1A (Email+LName+DOB) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Primary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '1A: Email+LName+DOB' WHEN r.MatchCount>1 THEN 'Review - Ambiguous 1A' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;
        
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Primary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Primary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND a.PostalCode = s.PRIMARY_POSTAL_CODE WHERE s.Primary_Match_Tier = 'Review - Ambiguous 1A';
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 1A-1 (Ambiguous 1A + Postal) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '1A-1: Tie-Break on Postal' ELSE 'Review - Ambiguous 1A-1' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_Match_Tier = 'Review - Ambiguous 1A'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Primary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Primary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Primary_Match_Tier = 'Review - Ambiguous 1A-1' AND c.FirstName = s.PRIMARY_FIRST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 1A-2 (Ambiguous 1A-1 + FName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '1A-2: Tie-Break on FName' ELSE 'Review - Ambiguous 1A-2' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_Match_Tier = 'Review - Ambiguous 1A-1'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier 1B -> 1B-1
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner JOIN POSData_DailyReplication.dbo.Address a_inner ON c_inner.ResidencyAddressId = a_inner.Id WHERE c_inner.EmailAddress = s.PrimaryOwnerEmail AND c_inner.LastName = s.PRIMARY_LAST_NAME AND a_inner.PostalCode = s.PRIMARY_POSTAL_CODE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.PrimaryOwnerEmail = c.EmailAddress AND s.PRIMARY_LAST_NAME = c.LastName JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND s.PRIMARY_POSTAL_CODE = a.PostalCode WHERE s.Primary_CID IS NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 1B (Email+LName+Postal) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Primary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '1B: Email+LName+Postal' WHEN r.MatchCount>1 THEN 'Review - Ambiguous 1B' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Primary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Primary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Primary_Match_Tier = 'Review - Ambiguous 1B' AND c.FirstName = s.PRIMARY_FIRST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 1B-1 (Ambiguous 1B + FName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '1B-1: Tie-Break on FName' ELSE 'Review - Ambiguous 1B-1' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_Match_Tier = 'Review - Ambiguous 1B'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier 1C: Email+FName+LName
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner WHERE c_inner.EmailAddress = s.PrimaryOwnerEmail AND c_inner.FirstName = s.PRIMARY_FIRST_NAME AND c_inner.LastName = s.PRIMARY_LAST_NAME FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.PrimaryOwnerEmail = c.EmailAddress AND s.PRIMARY_FIRST_NAME = c.FirstName AND s.PRIMARY_LAST_NAME = c.LastName WHERE s.Primary_CID IS NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 1C (Email+FName+LName) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Primary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '1C: Email+FName+LName' WHEN r.MatchCount>1 THEN 'Review - Ambiguous 1C' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;
        
        -- Tier 1D: Email Only
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner WHERE c_inner.EmailAddress = s.PrimaryOwnerEmail FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.PrimaryOwnerEmail = c.EmailAddress WHERE s.Primary_CID IS NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 1D (Email Only) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Primary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '1D: Email Only' WHEN r.MatchCount>1 THEN 'Review - Ambiguous 1D' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier 3A -> 3A-1
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner JOIN POSData_DailyReplication.dbo.Address a_inner ON c_inner.ResidencyAddressId = a_inner.Id WHERE c_inner.LastName = s.PRIMARY_LAST_NAME AND CAST(c_inner.DateOfBirth AS DATE) = s.PRIMARY_BIRTH_DATE AND a_inner.PostalCode = s.PRIMARY_POSTAL_CODE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.PRIMARY_LAST_NAME = c.LastName AND s.PRIMARY_BIRTH_DATE = CAST(c.DateOfBirth AS DATE) JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND s.PRIMARY_POSTAL_CODE = a.PostalCode WHERE s.Primary_CID IS NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 3A (LName+DOB+Postal) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Primary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '3A: LName+DOB+Postal' WHEN r.MatchCount>1 THEN 'Review - Ambiguous 3A' END, s.PrimaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.PrimaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.PrimaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records (with email back-population).'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;
        
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Primary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Primary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Primary_Match_Tier = 'Review - Ambiguous 3A' AND c.FirstName = s.PRIMARY_FIRST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 3A-1 (Ambiguous 3A + FName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '3A-1: Tie-Break on FName' ELSE 'Review - Ambiguous 3A-1' END, s.PrimaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.PrimaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.PrimaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_Match_Tier = 'Review - Ambiguous 3A'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier 3B -> 3B-1
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner JOIN POSData_DailyReplication.dbo.Address a_inner ON c_inner.ResidencyAddressId = a_inner.Id WHERE c_inner.FirstName = s.PRIMARY_FIRST_NAME AND CAST(c_inner.DateOfBirth AS DATE) = s.PRIMARY_BIRTH_DATE AND a_inner.PostalCode = s.PRIMARY_POSTAL_CODE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.PRIMARY_FIRST_NAME = c.FirstName AND s.PRIMARY_BIRTH_DATE = CAST(c.DateOfBirth AS DATE) JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND s.PRIMARY_POSTAL_CODE = a.PostalCode WHERE s.Primary_CID IS NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 3B (FName+DOB+Postal) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Primary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '3B: FName+DOB+Postal' WHEN r.MatchCount>1 THEN 'Review - Ambiguous 3B' END, s.PrimaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.PrimaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.PrimaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records (with email back-population).'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Primary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Primary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Primary_Match_Tier = 'Review - Ambiguous 3B' AND c.LastName = s.PRIMARY_LAST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier 3B-1 (Ambiguous 3B + LName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Primary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Primary_Match_Tier = CASE WHEN r.MatchCount=1 THEN '3B-1: Tie-Break on LName' ELSE 'Review - Ambiguous 3B-1' END, s.PrimaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.PrimaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.PrimaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Primary_Match_Tier = 'Review - Ambiguous 3B'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- =================================================================
        -- Step 3: Secondary Owner Matching (Full Logic)
        -- =================================================================
        RAISERROR(N'', 10, 1) WITH NOWAIT; RAISERROR(N'--- Step 3: Starting Secondary Owner Matching ---', 10, 1) WITH NOWAIT;
        
        -- Tier S1A -> S1A-1 -> S1A-2
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner WHERE c_inner.EmailAddress = s.SecondaryOwnerEmail AND c_inner.LastName = s.SECONDARY_LAST_NAME AND CAST(c_inner.DateOfBirth AS DATE) = s.SECONDARY_BIRTH_DATE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.SecondaryOwnerEmail = c.EmailAddress AND s.SECONDARY_LAST_NAME = c.LastName AND s.SECONDARY_BIRTH_DATE = CAST(c.DateOfBirth AS DATE) WHERE s.Secondary_CID IS NULL AND s.SecondaryOwnerEmail IS NOT NULL AND ISNULL(s.SecondaryOwnerEmail, '') <> ISNULL(s.PrimaryOwnerEmail, '');
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S1A (Secondary Email+LName+DOB) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Secondary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S1A: Email+LName+DOB' WHEN r.MatchCount>1 THEN 'Review - Ambiguous S1A' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Secondary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Secondary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND a.PostalCode = s.SECONDARY_POSTAL_CODE WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S1A';
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S1A-1 (Ambiguous S1A + Postal) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S1A-1: Tie-Break on Postal' ELSE 'Review - Ambiguous S1A-1' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S1A'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;
        
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Secondary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Secondary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S1A-1' AND c.FirstName = s.SECONDARY_FIRST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S1A-2 (Ambiguous S1A-1 + FName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S1A-2: Tie-Break on FName' ELSE 'Review - Ambiguous S1A-2' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S1A-1'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier S1B -> S1B-1
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner JOIN POSData_DailyReplication.dbo.Address a_inner ON c_inner.ResidencyAddressId = a_inner.Id WHERE c_inner.EmailAddress = s.SecondaryOwnerEmail AND c_inner.LastName = s.SECONDARY_LAST_NAME AND a_inner.PostalCode = s.SECONDARY_POSTAL_CODE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.SecondaryOwnerEmail = c.EmailAddress AND s.SECONDARY_LAST_NAME = c.LastName JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND s.SECONDARY_POSTAL_CODE = a.PostalCode WHERE s.Secondary_CID IS NULL AND s.SecondaryOwnerEmail IS NOT NULL AND ISNULL(s.SecondaryOwnerEmail, '') <> ISNULL(s.PrimaryOwnerEmail, '');
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S1B (Secondary Email+LName+Postal) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Secondary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S1B: Email+LName+Postal' WHEN r.MatchCount>1 THEN 'Review - Ambiguous S1B' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Secondary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Secondary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S1B' AND c.FirstName = s.SECONDARY_FIRST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S1B-1 (Ambiguous S1B + FName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S1B-1: Tie-Break on FName' ELSE 'Review - Ambiguous S1B-1' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S1B'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;
        
        -- Tier S1C: Email+FName+LName
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner WHERE c_inner.EmailAddress = s.SecondaryOwnerEmail AND c_inner.FirstName = s.SECONDARY_FIRST_NAME AND c_inner.LastName = s.SECONDARY_LAST_NAME FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.SecondaryOwnerEmail = c.EmailAddress AND s.SECONDARY_FIRST_NAME = c.FirstName AND s.SECONDARY_LAST_NAME = c.LastName WHERE s.Secondary_CID IS NULL AND s.SecondaryOwnerEmail IS NOT NULL AND ISNULL(s.SecondaryOwnerEmail, '') <> ISNULL(s.PrimaryOwnerEmail, '');
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S1C (Secondary Email+FName+LName) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Secondary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S1C: Email+FName+LName' WHEN r.MatchCount>1 THEN 'Review - Ambiguous S1C' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier S1D: Email Only
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner WHERE c_inner.EmailAddress = s.SecondaryOwnerEmail FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.SecondaryOwnerEmail = c.EmailAddress WHERE s.Secondary_CID IS NULL AND s.SecondaryOwnerEmail IS NOT NULL AND ISNULL(s.SecondaryOwnerEmail, '') <> ISNULL(s.PrimaryOwnerEmail, '');
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S1D (Secondary Email Only) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Secondary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S1D: Email Only' WHEN r.MatchCount>1 THEN 'Review - Ambiguous S1D' END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier S3A -> S3A-1
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner JOIN POSData_DailyReplication.dbo.Address a_inner ON c_inner.ResidencyAddressId = a_inner.Id WHERE c_inner.LastName = s.SECONDARY_LAST_NAME AND CAST(c_inner.DateOfBirth AS DATE) = s.SECONDARY_BIRTH_DATE AND a_inner.PostalCode = s.SECONDARY_POSTAL_CODE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.SECONDARY_LAST_NAME = c.LastName AND s.SECONDARY_BIRTH_DATE = CAST(c.DateOfBirth AS DATE) JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND s.SECONDARY_POSTAL_CODE = a.PostalCode WHERE s.Secondary_CID IS NULL AND s.SECONDARY_LAST_NAME IS NOT NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S3A (Secondary LName+DOB+Postal) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Secondary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S3A: LName+DOB+Postal' WHEN r.MatchCount>1 THEN 'Review - Ambiguous S3A' END, s.SecondaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.SecondaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.SecondaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records (with email back-population).'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;
        
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Secondary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Secondary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S3A' AND c.FirstName = s.SECONDARY_FIRST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S3A-1 (Ambiguous S3A + FName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S3A-1: Tie-Break on FName' ELSE 'Review - Ambiguous S3A-1' END, s.SecondaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.SecondaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.SecondaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S3A'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- Tier S3B -> S3B-1
        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), STUFF((SELECT ', ' + c_inner.CustomerId FROM POSData_DailyReplication.dbo.Customer c_inner JOIN POSData_DailyReplication.dbo.Address a_inner ON c_inner.ResidencyAddressId = a_inner.Id WHERE c_inner.FirstName = s.SECONDARY_FIRST_NAME AND CAST(c_inner.DateOfBirth AS DATE) = s.SECONDARY_BIRTH_DATE AND a_inner.PostalCode = s.SECONDARY_POSTAL_CODE FOR XML PATH('')), 1, 2, '') FROM #Staging s JOIN POSData_DailyReplication.dbo.Customer c ON s.SECONDARY_FIRST_NAME = c.FirstName AND s.SECONDARY_BIRTH_DATE = CAST(c.DateOfBirth AS DATE) JOIN POSData_DailyReplication.dbo.Address a ON c.ResidencyAddressId = a.Id AND s.SECONDARY_POSTAL_CODE = a.PostalCode WHERE s.Secondary_CID IS NULL AND s.SECONDARY_FIRST_NAME IS NOT NULL;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S3B (Secondary FName+DOB+Postal) found matches for %i source records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Probable_Secondary_CIDs = CASE WHEN r.MatchCount>1 THEN r.All_CIDs END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S3B: FName+DOB+Postal' WHEN r.MatchCount>1 THEN 'Review - Ambiguous S3B' END, s.SecondaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.SecondaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.SecondaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_CID IS NULL; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records (with email back-population).'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        INSERT INTO #MatchResults (BusinessKey, CustomerId, MatchCount, All_CIDs) SELECT s.BusinessKey, c.CustomerId, COUNT(*) OVER (PARTITION BY s.BusinessKey), s.Probable_Secondary_CIDs FROM #Staging s CROSS APPLY STRING_SPLIT(s.Probable_Secondary_CIDs, ',') spl JOIN POSData_DailyReplication.dbo.Customer c ON LTRIM(RTRIM(spl.value)) = c.CustomerId WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S3B' AND c.LastName = s.SECONDARY_LAST_NAME;
        SELECT @FoundMatches = COUNT(DISTINCT BusinessKey) FROM #MatchResults; SET @Msg = N'    > Tier S3B-1 (Ambiguous S3B + LName) attempted to resolve %i records.'; RAISERROR(@Msg, 10, 1, @FoundMatches) WITH NOWAIT;
        UPDATE s SET s.Secondary_CID = CASE WHEN r.MatchCount=1 THEN r.CustomerId END, s.Secondary_Match_Tier = CASE WHEN r.MatchCount=1 THEN 'S3B-1: Tie-Break on LName' ELSE 'Review - Ambiguous S3B-1' END, s.SecondaryOwnerEmail = CASE WHEN r.MatchCount=1 AND s.SecondaryOwnerEmail IS NULL THEN (SELECT EmailAddress FROM POSData_DailyReplication.dbo.Customer c_email WHERE c_email.CustomerId = r.CustomerId) ELSE s.SecondaryOwnerEmail END FROM #Staging s JOIN (SELECT DISTINCT * FROM #MatchResults) r ON s.BusinessKey=r.BusinessKey WHERE s.Secondary_Match_Tier = 'Review - Ambiguous S3B'; SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'      - Staging table updated for %i records.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT; TRUNCATE TABLE #MatchResults;

        -- =================================================================
        -- Step 4: Final Merge
        -- =================================================================
        RAISERROR(N'', 10, 1) WITH NOWAIT; RAISERROR(N'--- Step 4: Merging all results... ---', 10, 1) WITH NOWAIT;
        MERGE INTO dbo.Boat_CID AS Target USING #Staging AS Source ON Target.BusinessKey = Source.BusinessKey
        WHEN MATCHED AND (ISNULL(Target.Primary_CID,'') <> ISNULL(Source.Primary_CID,'') OR ISNULL(Target.Probable_Primary_CIDs,'') <> ISNULL(Source.Probable_Primary_CIDs,'') OR ISNULL(Target.Secondary_CID,'') <> ISNULL(Source.Secondary_CID,'') OR ISNULL(Target.Probable_Secondary_CIDs,'') <> ISNULL(Source.Probable_Secondary_CIDs,''))
        THEN UPDATE SET Target.Primary_CID=Source.Primary_CID, Target.Primary_Match_Tier=Source.Primary_Match_Tier, Target.Probable_Primary_CIDs=Source.Probable_Primary_CIDs, Target.Secondary_CID=Source.Secondary_CID, Target.Secondary_Match_Tier=Source.Secondary_Match_Tier, Target.Probable_Secondary_CIDs=Source.Probable_Secondary_CIDs, Target.ModifiedDate=GETDATE(), Target.PrimaryOwnerEmail=Source.PrimaryOwnerEmail, Target.SecondaryOwnerEmail=Source.SecondaryOwnerEmail, Target.PA_REG=Source.PA_REG, Target.CheckDigit=Source.CheckDigit, Target.HIN_NUMBER=Source.HIN_NUMBER, Target.PREVIOUS_HIN_NUMBER=Source.PREVIOUS_HIN_NUMBER, Target.WC_MAKE=Source.WC_MAKE, Target.WC_MODEL=Source.WC_MODEL, Target.MODEL_YR=Source.MODEL_YR, Target.LENGTH_FT=Source.LENGTH_FT, Target.LENGTH_IN=Source.LENGTH_IN, Target.BOAT_TYPE=Source.BOAT_TYPE, Target.POWERED=Source.POWERED, Target.USE_TYPE=Source.USE_TYPE, Target.REGIST_EXPIRATION_DATE=Source.REGIST_EXPIRATION_DATE, Target.REGIST_ISSUE_DATE=Source.REGIST_ISSUE_DATE, Target.REG_STATUS=Source.REG_STATUS, Target.FEE=Source.FEE, Target.PRIMARY_FIRST_NAME=Source.PRIMARY_FIRST_NAME, Target.PRIMARY_MIDDLE_NAME=Source.PRIMARY_MIDDLE_NAME, Target.PRIMARY_LAST_NAME=Source.PRIMARY_LAST_NAME, Target.PRIMARY_SUFFIX_CODE=Source.PRIMARY_SUFFIX_CODE, Target.PRIMARY_BIRTH_DATE=Source.PRIMARY_BIRTH_DATE, Target.PRIMARY_OWNER_TYPE=Source.PRIMARY_OWNER_TYPE, Target.PRIMARY_ADDRESS_LINE1=Source.PRIMARY_ADDRESS_LINE1, Target.PRIMARY_ADDRESS_LINE2=Source.PRIMARY_ADDRESS_LINE2, Target.PRIMARY_ADDRESS_NORMALIZED=Source.PRIMARY_ADDRESS_NORMALIZED, Target.PRIMARY_CITY_NAME=Source.PRIMARY_CITY_NAME, Target.PRIMARY_STATE_CODE=Source.PRIMARY_STATE_CODE, Target.PRIMARY_POSTAL_CODE=Source.PRIMARY_POSTAL_CODE, Target.PRIMARY_ZIP_EXTENSION_CODE=Source.PRIMARY_ZIP_EXTENSION_CODE, Target.PRIMARY_COUNTY_NAME=Source.PRIMARY_COUNTY_NAME, Target.SECONDARY_FIRST_NAME=Source.SECONDARY_FIRST_NAME, Target.SECONDARY_MIDDLE_NAME=Source.SECONDARY_MIDDLE_NAME, Target.SECONDARY_LAST_NAME=Source.SECONDARY_LAST_NAME, Target.SECONDARY_SUFFIX_CODE=Source.SECONDARY_SUFFIX_CODE, Target.SECONDARY_BIRTH_DATE=Source.SECONDARY_BIRTH_DATE, Target.SECONDARY_OWNER_TYPE=Source.SECONDARY_OWNER_TYPE, Target.SECONDARY_ADDRESS_LINE1=Source.SECONDARY_ADDRESS_LINE1, Target.SECONDARY_CITY_NAME=Source.SECONDARY_CITY_NAME, Target.SECONDARY_STATE_CODE=Source.SECONDARY_STATE_CODE, Target.SECONDARY_POSTAL_CODE=Source.SECONDARY_POSTAL_CODE, Target.SECONDARY_ZIP_EXTENSION_CODE=Source.SECONDARY_ZIP_EXTENSION_CODE, Target.SECONDARY_COUNTY_NAME=Source.SECONDARY_COUNTY_NAME
        WHEN NOT MATCHED BY TARGET
        THEN INSERT (BusinessKey, Primary_CID, Primary_Match_Tier, Probable_Primary_CIDs, Secondary_CID, Secondary_Match_Tier, Probable_Secondary_CIDs, ModifiedDate, PrimaryOwnerEmail, SecondaryOwnerEmail, PA_REG, CheckDigit, HIN_NUMBER, PREVIOUS_HIN_NUMBER, WC_MAKE, WC_MODEL, MODEL_YR, LENGTH_FT, LENGTH_IN, BOAT_TYPE, POWERED, USE_TYPE, REGIST_EXPIRATION_DATE, REGIST_ISSUE_DATE, REG_STATUS, FEE, PRIMARY_FIRST_NAME, PRIMARY_MIDDLE_NAME, PRIMARY_LAST_NAME, PRIMARY_SUFFIX_CODE, PRIMARY_BIRTH_DATE, PRIMARY_OWNER_TYPE, PRIMARY_ADDRESS_LINE1, PRIMARY_ADDRESS_LINE2, PRIMARY_ADDRESS_NORMALIZED, PRIMARY_CITY_NAME, PRIMARY_STATE_CODE, PRIMARY_POSTAL_CODE, PRIMARY_ZIP_EXTENSION_CODE, PRIMARY_COUNTY_NAME, SECONDARY_FIRST_NAME, SECONDARY_MIDDLE_NAME, SECONDARY_LAST_NAME, SECONDARY_SUFFIX_CODE, SECONDARY_BIRTH_DATE, SECONDARY_OWNER_TYPE, SECONDARY_ADDRESS_LINE1, SECONDARY_CITY_NAME, SECONDARY_STATE_CODE, SECONDARY_POSTAL_CODE, SECONDARY_ZIP_EXTENSION_CODE, SECONDARY_COUNTY_NAME)
        VALUES (Source.BusinessKey, Source.Primary_CID, Source.Primary_Match_Tier, Source.Probable_Primary_CIDs, Source.Secondary_CID, Source.Secondary_Match_Tier, Source.Probable_Secondary_CIDs, GETDATE(), Source.PrimaryOwnerEmail, Source.SecondaryOwnerEmail, Source.PA_REG, Source.CheckDigit, Source.HIN_NUMBER, Source.PREVIOUS_HIN_NUMBER, Source.WC_MAKE, Source.WC_MODEL, Source.MODEL_YR, Source.LENGTH_FT, Source.LENGTH_IN, Source.BOAT_TYPE, Source.POWERED, Source.USE_TYPE, Source.REGIST_EXPIRATION_DATE, Source.REGIST_ISSUE_DATE, Source.REG_STATUS, Source.FEE, Source.PRIMARY_FIRST_NAME, Source.PRIMARY_MIDDLE_NAME, Source.PRIMARY_LAST_NAME, Source.PRIMARY_SUFFIX_CODE, Source.PRIMARY_BIRTH_DATE, Source.PRIMARY_OWNER_TYPE, Source.PRIMARY_ADDRESS_LINE1, Source.PRIMARY_ADDRESS_LINE2, Source.PRIMARY_ADDRESS_NORMALIZED, Source.PRIMARY_CITY_NAME, Source.PRIMARY_STATE_CODE, Source.PRIMARY_POSTAL_CODE, Source.PRIMARY_ZIP_EXTENSION_CODE, Source.PRIMARY_COUNTY_NAME, Source.SECONDARY_FIRST_NAME, Source.SECONDARY_MIDDLE_NAME, Source.SECONDARY_LAST_NAME, Source.SECONDARY_SUFFIX_CODE, Source.SECONDARY_BIRTH_DATE, Source.SECONDARY_OWNER_TYPE, Source.SECONDARY_ADDRESS_LINE1, Source.SECONDARY_CITY_NAME, Source.SECONDARY_STATE_CODE, Source.SECONDARY_POSTAL_CODE, Source.SECONDARY_ZIP_EXTENSION_CODE, Source.SECONDARY_COUNTY_NAME)
        WHEN NOT MATCHED BY SOURCE AND @TestRowCount IS NULL THEN DELETE;

        SET @AffectedRows = @@ROWCOUNT; SET @Msg = N'    > MERGE operation complete. %i rows affected.'; RAISERROR(@Msg, 10, 1, @AffectedRows) WITH NOWAIT;
        COMMIT TRANSACTION;
        IF OBJECT_ID('tempdb..#MatchResults') IS NOT NULL DROP TABLE #MatchResults;
        RAISERROR(N'', 10, 1) WITH NOWAIT; RAISERROR(N'--- Procedure Finished Successfully ---', 10, 1) WITH NOWAIT;
        SET @TimeNow = CONVERT(VARCHAR, GETDATE(), 120); RAISERROR(N'End Time: %s', 10, 1, @TimeNow) WITH NOWAIT;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        IF OBJECT_ID('tempdb..#Staging') IS NOT NULL DROP TABLE #Staging;
        IF OBJECT_ID('tempdb..#MatchResults') IS NOT NULL DROP TABLE #MatchResults;
        RAISERROR(N'', 10, 1) WITH NOWAIT; RAISERROR(N'--- !!! AN ERROR OCCURRED. ALL CHANGES HAVE BEEN ROLLED BACK. !!! ---', 10, 1) WITH NOWAIT;
        THROW;
    END CATCH;
    IF OBJECT_ID('tempdb..#Staging') IS NOT NULL DROP TABLE #Staging;
END;
GO


